from news.models import *


Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> u= User.objects.create_user(username='User1') 
>>> u
<User: User1>
>>> u2= User.objects.create_user(username='User2') 
>>> u2
<User: User2>





Создать два объекта модели Author, связанные с пользователями.

>>> Author.objects.create(authorUser=u)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2) 
<Author: Author object (2)>



Добавить 4 категории в модель Category.

>>> Category.objects.create(name='Political')
<Category: Category object (1)>
>>> Category.objects.create(name='Sport')     
<Category: Category object (2)>
>>> Category.objects.create(name='IT')    
<Category: Category object (3)>
>>> Category.objects.create(name='Economy')
<Category: Category object (4)>





Добавить 2 статьи и 1 новость.

author = Author.objects.get(id=1)
Post.objects.create(author=author, categoryType='NW', title='Title', text='mnogo texta')
<Post: Post object (1)>
>>> Post.objects.get(id=1).title
'Title'

>>> author = Author.objects.get(id=2)
>>> Post.objects.create(author=author, categoryType='AR', title='Title Article', text='mnogo texta article ')
<Post: Post object (2)>
>>> Post.objects.get(id=2).title 
'Title Article'


>>> Post.objects.create(author=author, categoryType='AR', title='Title Article 2', text='mnogo texta article2 ') 
<Post: Post object (3)>
>>> Post.objects.get(id=3).title 
'Title Article 2'







Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))






Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='big text from *hjk') 
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='big text')    
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='big text id 2') 
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='big text id 3')  
<Comment: Comment object (4)>




Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=3).like()    
>>> Comment.objects.get(id=3).like()
>>> Comment.objects.get(id=3).dislike()
>>> Comment.objects.get(id=3).like()
>>> Comment.objects.get(id=4).dislike() 


>>> Comment.objects.get(id=1).rating
2
>>> Comment.objects.get(id=2).rating 
-6
>>> Comment.objects.get(id=3).rating 
3
>>> Comment.objects.get(id=4).rating 
-1


>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).dislike() 
>>> Post.objects.get(id=2).dislike() 
>>> Post.objects.get(id=2).dislike()
>>> Post.objects.get(id=2).like()    
>>> Post.objects.get(id=3).like() 
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()

>>> Post.objects.get(id=1).rating
3
>>> Post.objects.get(id=2).rating 
-1
>>> Post.objects.get(id=3).rating 
3




Обновить рейтинги пользователей.
>>> aa=Author.objects.get(id=1) 
>>> aa.update_rating() 
>>> bb=Author.objects.get(id=2) 
>>> bb.update_rating()  
>>> aa.ratingAuthor                  
10
>>> bb.ratingAuthor 
3







Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

>>> a= Author.objects.order_by('-ratingAuthor')[:1]
>>> for i in a:          
...     i.ratingAuthor
...     i.authorUser.username
... 
10
'User1'

>>> Author.objects.order_by('-ratingAuthor')[:1].values('authorUser__username', 'ratingAuthor')    
<QuerySet [{'authorUser__username': 'User1', 'ratingAuthor': 10}]>


  

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

>>> Post.objects.order_by('-rating').values('author__authorUser__username', 'rating', 'title', 'dateCreation')[0]     
{'author__authorUser__username': 'User1', 'rating': 3, 'title': 'Title', 'dateCreation': datetime.datetime(2022, 11, 2, 18, 3, 46, 85918, tzinfo=datet
ime.timezone.utc)}
>>> pr1=ppp.preview()
>>> pr1              
'mnogo texta...'




Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

>>> best_post=Post.objects.order_by('-rating')[0] 
>>> best_post.comment_set.all().values('dateCreation', 'commentUser__username', 'rating', 'text')  
<QuerySet [{'dateCreation': datetime.datetime(2022, 11, 2, 18, 12, 13, 673483, tzinfo=datetime.timezone.utc), 'commentUser__username': 'User1', 'rating': 2, 'text': 'big tex
t from *hjk'}, {'dateCreation': datetime.datetime(2022, 11, 3, 11, 11, 30, 656745, tzinfo=datetime.timezone.utc), 'commentUser__username': 'User2', 'rating': -6, 'text': 'bi
g text'}]>
>>>

