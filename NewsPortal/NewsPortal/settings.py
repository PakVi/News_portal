"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9ww_8)6s^#-bh=%$$0o7$bb=*4b_pc+094o3l)=l426%_-t0k8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news.apps.NewsConfig',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'django_apscheduler',


]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'


]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILEL_DIRS = [BASE_DIR / "static"]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'


LOGIN_REDIRECT_URL = "/news"
LOGOUT_REDIRECT_URL = "/news"

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}




#
# EMAIL_HOST = 'smtp.yandex.ru'
# EMAIL_POST = 465
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# EMAIL_USE_SSL = True
# DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")

SITE_URL = 'http://127.0.0.1:8000'



EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'bunkermsk22'
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = 'bunkermsk22@yandex.ru'
EMAIL_TIMEOUT = 60


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        'TIMEOUT': 60,

    }
}


# LOGGING = {
#     'version': 1,
#     'disable_existing_logger': False,
#     'loggers': {
#         'django': {
#             'handlers': ['news'],
#             'level': 'DEBUG',
#         },
#     },
#     'handlers': {
#         'news': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'debug.log',
#             'formatter': 'myformatter',
#         },
#     },
#     'formatters': {
#         'myformatter': {
#             'format': '{asctime} {levelname} {message}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#     },
#
# }
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'myformatter': {
#             'format': '{asctime} {levelname} {module} {message}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#         'console_debug_format': {
#             'format': '%(asctime)s %(levelname)s - %(message)s'
#         },
#         'console_warning_format': {
#             'format': '%(asctime)s %(levelname)s - %(message)s - %(pathname)s'
#         },
#         'console_error_critical_format': {
#             'format': '%(asctime)s %(levelname)s - %(message)s - %(pathname)s - %(exc_info)s'
#         },
#         'mail_format': {
#             'format': '%(asctime)s %(levelname)s - %(message)s - %(pathname)s'
#         },
#         'security_format': {
#             'format': '%(asctime)s %(levelname)s - %(module)s - %(message)s'
#         },
#         'general_log_format': {
#             'format': '%(asctime)s %(levelname)s - %(module)s - %(message)s'
#         },
#
#     },
#
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#     },
#     'handlers': {
#         'general_file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'general.log',
#             'formatter': 'myformatter',
#         },
#         'console_debug': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'console_debug_format',
#             'filters': ['require_debug_true'],
#         },
#         'console_warning': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'formatter': 'console_warning_format',
#         },
#         'console_error_critical': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'formatter': 'console_error_critical_format',
#         },
#         # 'general_file': {
#         #     'level': "INFO",
#         #     'class': "logging.FileHandler",
#         #     'filename': "general.log",
#         #     'filters': ['require_debug_false'],
#         #     'formatter': 'general_log_format',
#         # },
#         'errors_file': {
#             'class': "logging.FileHandler",
#             'filename': "errors.log",
#             'level': "ERROR",
#             'formatter': 'console_error_critical_format',
#         },
#         'security_file': {
#             'class': "logging.FileHandler",
#             'filename': "security.log",
#             'level': "WARNING",
#             'formatter': "security_format",
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'filters': ['require_debug_false'],
#             'formatter': 'mail_format',
#         },
#
#     },
#     'loggers': {
#         'console_debug': {
#             'handlers': ['console_debug'],
#             'propagate': True,
#         },
#         'console_warning': {
#             'handlers': ['console_warning'],
#             'propagate': True,
#         },
#         'console_error': {
#             'handlers': ['console_error_critical'],
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['mail_admins', 'errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.server': {
#             'handlers': ['mail_admins', 'errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.db_backends': {
#             'handlers': ['errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.template': {
#             'handlers': ['errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.security': {
#             'handlers': ['security_file'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#         # 'django': {
#         #     'handlers': ['general_file'],
#         #     'level': 'INFO',
#         # },
#         'django': {
#             'handlers': ['general_file'],
#             'level': 'DEBUG',
#         },
#     },
# }


LOGGING = {
    'version': 1,
    'disable_existing_logging': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)-24s %(levelname)-8s %(message)s',
        },

        'warning': {
            'format': '{asctime} -- {levelname} -- {message} --> {pathname}',
            'style': '{',
        },

        'error': {
            'format': '{asctime} -- {levelname} -- {message} --> {pathname} *** {exc_info}',
            'style': '{',
        },

        'file': {
            'format': '{asctime} -- {levelname} -- {message} -- {module}',
            'style': '{',
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning'
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'error'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': 'general.log',
            'filters': ['require_debug_true'],
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'error',
            'filename': 'errors.log'
        },
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': 'security.log'
        },
        'mail': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning',
        },
        'general_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'filters': ['require_debug_true'],
            'formatter': 'file',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_warning', 'console_error', 'file'],
            'propagate': True,
            'level': 'DEBUG'
        },
        'django.request': {
            'handlers': ['file_errors', 'mail'],
            'propagate': True
        },
        'django.server': {
            'handlers': ['file_errors', 'mail'],
            'propagate': True
        },
        'django.template': {
            'handlers': ['file_errors'],
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['file_errors'],
            'propagate': True
        },
        'django.security': {
            'handlers': ['file_security'],
            'propagate': True
        },
        # 'django': {
        #     'handlers': ['general_file'],
        #     'level': 'INFO',
        #     'propagate': True,
        # },
    }
}
